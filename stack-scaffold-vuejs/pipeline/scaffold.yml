# YAML anchors
shared:
# Task : sync and merge with rsync 2 rep. Used to merge stack and config
- &merge-stack-and-config
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: cycloid/cycloid-toolkit
      tag: latest
  run:
    path: /usr/bin/merge-stack-and-config


resource_types:
- name: terraform
  type: registry-image
  source:
    repository: cycloid/terraform-resource
    tag: ((terraform_version))


resources:
- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ($ .environment $)
    backend_type: http
    backend_config:
      address: '($ .api_url $)/inventory?jwt=($ .inventory_jwt $)'
    vars:
      cyorg_jwt: ((cyorg_jwt))
      cycloid_api_url: ($ .api_url $)
      github_pat: ((github_pat))
      cyenv: ($ .environment $)
      cyproject: ($ .project $)
      cyorg: ($ .organization_canonical $)


# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  icon: github-circle
  source:
    uri: ($ .scs_url $)
    branch: ($ .scs_branch $)
    ($- if eq .scs_cred_type "basic_auth" $)
    username: ((($ .scs_cred_path $).username))
    password: ((($ .scs_cred_path $).password))
    ($- end $)
    ($- if eq .scs_cred_type "ssh" $)
    private_key: ((($ .scs_cred_path $).ssh_key))
    ($- end $)
    paths:
      - ($ .stack_path $)/terraform-scaffold/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  icon: github-circle
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
    ($- if eq .cr_cred_type "basic_auth" $)
    username: ((($ .cr_cred_path $).username))
    password: ((($ .cr_cred_path $).password))
    ($- end $)
    ($- if eq .cr_cred_type "ssh" $)
    private_key: ((($ .cr_cred_path $).ssh_key))
    ($- end $)
    paths:
      - ($ .project $)/terraform-scaffold/($ .environment $)/*

groups:
- name: overview
  jobs:
    - create-git-repo
    - scaffold-project
    - monitor-pr

- name: destroy
  jobs:
    - destroy-git-repo


jobs:
  - name: create-git-repo
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: true

        - get: git_config-terraform
          trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ($ .project $)/terraform-scaffold/($ .environment $)
          STACK_PATH: ($ .stack_path $)/terraform-scaffold

      - put: tfstate
        params:
          terraform_source: merged-stack/


  # Monitor new open PR to deploy feature env
  - name: scaffold-project
    max_in_flight: 1
    build_logs_to_retain: 20
    plan:
      - in_parallel:
        - get: tfstate
          trigger: true
          passed:
            - create-git-repo

      - task: copy-template
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: node
              tag: latest
          run:
            path: /bin/bash
            args:
            - -ecx
            - |
              apt-get update
              apt-get install jq -y
              mkdir -p ~/.ssh
              echo "${GIT_KEY}" >~/.ssh/git
              chmod 600 ~/.ssh/git
              eval "$(ssh-agent -s)"
              ssh-add ~/.ssh/git
              ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
              git clone $GIT_URL template
              echo $FEATURE_FLAGS
              ffarr=$(echo $FEATURE_FLAGS | jq -r '.[]')
              for i in $ffarr; do
                  FF="$FF --$i"
              done
              npm create vue@latest --yes -- --no-git --name $PROJECT $FF
              shopt -s dotglob
              mv $PROJECT/* template/
              cd template/
              git config --global user.email "devops@cycoid.io"
              git config --global user.name "Cycloid"
              git add .
              git commit -m "Initial template"
              git push

              echo "Application build completed."
        params:
          GIT_URL: "git@github.com:cycloid-demo/($ .organization_canonical $)-($ .project $).git"
          GIT_KEY: ((($ .project $).ssh_key))
          PROJECT: ($ .project $)
          FEATURE_FLAGS: ((vuejs_feature_flags))


  # Monitor new open PR to deploy feature env
  - name: monitor-pr
    max_in_flight: 1
    build_logs_to_retain: 20
    plan:
      - in_parallel:
        - get: tfstate
          trigger: true
          passed:
            - create-git-repo

      - task: create-env
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: sh
            args:
              - -ec
              - |
                # If not already created, create a new env monitor open prs
                cy project create-stackforms-env \
                --org $CY_ORG \
                --project ${PROJECT} \
                --env "monitor_pr" --use-case "pull_requests" \
                --update
        params:
          PROJECT: ($ .project $)
          CY_ORG: ($ .organization_canonical $)
          CY_API_URL: ($ .api_url $)
          CY_API_TOKEN: ((admin-api-key.key))
          INSECURE: "true"


  # Destroy the infrastructure
  - name: destroy-git-repo
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - create-git-repo

        - get: git_config-terraform
          trigger: false
          passed:
            - create-git-repo

        - get: tfstate
          trigger: false

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ($ .project $)/terraform-scaffold/($ .environment $)
          STACK_PATH: ($ .stack_path $)/terraform-scaffold

      - put: tfstate
        params:
          action: destroy
          terraform_source: merged-stack/
        get_params:
          action: destroy
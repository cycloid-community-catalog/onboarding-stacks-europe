groups:
- name: overview
  jobs:
    - deploy-k3s

- name: destroy
  jobs:
    - destroy-k3s


jobs:
  - name: deploy-k3s
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - task: deploy-k3s
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: cycloid/cycloid-toolkit
            tag: latest
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            mkdir -p ~/.ssh
            echo "${SSH_PRIVATE_KEY}" >~/.ssh/git
            chmod 600 ~/.ssh/git
            eval "$(ssh-agent -s)"
            ssh-add ~/.ssh/git
            case $CLOUD_TYPE in
              "Ionos") IPADDR=${IONOS_IP};;
              "Outscale") IPADDR=${OUTSCALE_IP};;
              "Other") IPADDR=${OTHER_IP};;
              *) IPADDR="unknown";;
            esac
            echo IPADDR
            echo $IPADDR
            if ssh -t admin@${IPADDR} pwd; then
              USERNAME=admin
            else
              if ssh -t root@${IPADDR} pwd; then
                USERNAME=root
              else
                if ssh -t outscale@${IPADDR} pwd; then
                  USERNAME=outscale
                else
                  echo "Error: SSH user not found... Tried [admin, root, outscale]"
                  exit 1
                fi
              fi
            fi
            echo "Installing K3s..."
            ssh ${USERNAME}@${IPADDR} "curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE='644' INSTALL_K3S_EXEC='--disable traefik --disable servicelb --tls-san ${IPADDR}' sh -s -"
            ssh ${USERNAME}@${IPADDR} "until sudo ls /etc/rancher/k3s/k3s.yaml /dev/null; do sleep 1; done"
            ssh ${USERNAME}@${IPADDR} "mkdir -p ~/.kube && sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config && sudo chmod 644 ~/.kube/config"
            ssh ${USERNAME}@${IPADDR} "export KUBECONFIG=~/.kube/config && kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0/deploy/static/provider/baremetal/deploy.yaml"
            #kubectl patch svc ingress-nginx-controller -n ingress-nginx -p '{"spec": {"type": "LoadBalancer", "externalIPs":["5.104.97.238"]}}'
            scp ${USERNAME}@${IPADDR}:~/.kube/config ~/kubeconfig
            sed -i "s/127.0.0.1/${IPADDR}/" ~/kubeconfig
            echo "Saving kubeconfig in Credential ${CY_ORG}-${PROJECT}-${ENV}-kubeconfig"
            if ! cy credential create --name "${CY_ORG}-${PROJECT}-${ENV}-kubeconfig" --canonical "${CY_ORG}-${PROJECT}-${ENV}-kubeconfig" custom --field-file kubeconfig=~/kubeconfig; then
              echo "Error: cy returned code $?. Trying to update it."
              if ! cy credential update --name "${CY_ORG}-${PROJECT}-${ENV}-kubeconfig" --canonical "${CY_ORG}-${PROJECT}-${ENV}-kubeconfig" custom --field-file kubeconfig=~/kubeconfig; then
                  echo "Error: cy returned code $?"
                  exit 1
              fi
            fi
        params:
          SSH_PRIVATE_KEY: ((ssh_key))
          CLOUD_TYPE: ((cloud_type))
          IONOS_IP: ((ionos_ip))
          OUTSCALE_IP: ((outscale_ip))
          OTHER_IP: ((other_ip))
          CY_API_KEY: ((cycloid_api_key))
          CY_API_URL: ($ .api_url $)
          CY_ORG: ($ .organization_canonical $)
          PROJECT: ($ .project $)
          ENV: ($ .environment $)


  # Destroy the infrastructure
  - name: destroy-k3s
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - task: destroy-k3s
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: cycloid/cycloid-toolkit
            tag: latest
        run:
          path: /bin/bash
          args:
          - -ecx
          - |
            echo "Deleting Credential ${CY_ORG}-${PROJECT}-${ENV}-kubeconfig"
            if ! cy credential delete --canonical "${CY_ORG}-${PROJECT}-${ENV}-kubeconfig"; then
              echo "Error: cy returned code $?"
              exit 1
            fi
        params:
          CY_API_KEY: ((cycloid_api_key))
          CY_API_URL: ($ .api_url $)
          CY_ORG: ($ .organization_canonical $)
          PROJECT: ($ .project $)
          ENV: ($ .environment $)
resources:
# The repo with our Dockerfile
- name: git_app_code
  type: git
  icon: github-circle
  source:
    uri: ((git_url))
    branch: ((git_branch))
    paths:
      - ((git_path))/*

# Where we will push the image
- name: app_image
  type: registry-image
  icon: docker
  source:
    repository: ((registry_repository))
    username: ((registry_username))
    password: ((registry_password))
    tag: ($ .environment $)


groups:
- name: overview
  jobs:
    - build-and-push
    - deploy-app

- name: delete
  jobs:
    - delete-app


jobs:
- name: build-and-push
  plan:
  - get: git_app_code
    trigger: true
  - task: build-task-image
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: concourse/oci-build-task
      inputs:
      - name: git_app_code
      outputs:
      - name: image
      params:
        CONTEXT: git_app_code/((git_path))
      caches:
      - path: cache
      run:
        path: build
  - put: app_image
    params:
      image: image/image.tar

- name: deploy-app
  serial: true
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
  - get: app_image
    trigger: true
    passed:
      - build-and-push
  - task: deploy-app
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: olivier2t/toolkit
          tag: latest
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          echo -e "${KUBECONFIG_CONTENT}" >kubeconfig
          export KUBECONFIG="$(pwd)/kubeconfig"
          export K8S_EXTERNAL_IP=$(kubectl config view -o json | jq .clusters[0].cluster.server | gawk -F[/:] '{print $4}')
          export APP_NAME=$(echo ${APP_NAME} | sed 's/_//')
          cat <<-EOF >deploy.yaml
          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: ${APP_NAME}
          ---
          # Deployment
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${APP_NAME}
            namespace: ${APP_NAME}
          spec:
            replicas: ${APP_REPLICAS}
            selector:
              matchLabels:
                app: ${APP_NAME}
            template:
              metadata:
                labels:
                  app: ${APP_NAME}
              spec:
                containers:
                  - name: ${APP_NAME}
                    image: ${APP_IMAGE_REPO}:${APP_IMAGE_TAG}
                    ports:
                      - containerPort: ${APP_PORT}
                    imagePullPolicy: Always
          ---
          # Service
          apiVersion: v1
          kind: Service
          metadata:
            name: ${APP_NAME}
            namespace: ${APP_NAME}
          spec:
            selector:
              app: ${APP_NAME}
            ports:
              - port: 80
                targetPort: ${APP_PORT}
          ---
          # Ingress
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: ${APP_NAME}
            namespace: ${APP_NAME}
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          spec:
            ingressClassName: nginx
            rules:
              - host: ${APP_NAME}.${K8S_EXTERNAL_IP}.nip.io
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: ${APP_NAME}
                          port:
                            number: 80
          EOF
          echo "Deploying..."
          kubectl apply -f deploy.yaml
      params:
        KUBECONFIG_CONTENT: ((kubeconfig_content))
        APP_NAME: ($ .organization_canonical $)-($ .project $)-($ .environment $)
        APP_PORT: 8080
        APP_REPLICAS: 3
        APP_IMAGE_REPO: ((registry_repository))
        APP_IMAGE_TAG: ($ .environment $)


- name: delete-app
  serial: true
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
  - task: delete-app
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: olivier2t/toolkit
          tag: latest
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          echo -e "${KUBECONFIG_CONTENT}" >kubeconfig
          export KUBECONFIG="$(pwd)/kubeconfig"
          export K8S_EXTERNAL_IP=$(kubectl config view -o json | jq .clusters[0].cluster.server | gawk -F[/:] '{print $4}')
          export APP_NAME=$(echo ${APP_NAME} | sed 's/_//')
          cat <<-EOF >deploy.yaml
          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: ${APP_NAME}
          ---
          # Deployment
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${APP_NAME}
            namespace: ${APP_NAME}
          spec:
            replicas: ${APP_REPLICAS}
            selector:
              matchLabels:
                app: ${APP_NAME}
            template:
              metadata:
                labels:
                  app: ${APP_NAME}
              spec:
                containers:
                  - name: ${APP_NAME}
                    image: ${APP_IMAGE_REPO}:${APP_IMAGE_TAG}
                    ports:
                      - containerPort: ${APP_PORT}
                    imagePullPolicy: Always
          ---
          # Service
          apiVersion: v1
          kind: Service
          metadata:
            name: ${APP_NAME}
            namespace: ${APP_NAME}
          spec:
            selector:
              app: ${APP_NAME}
            ports:
              - port: 80
                targetPort: ${APP_PORT}
          ---
          # Ingress
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: ${APP_NAME}
            namespace: ${APP_NAME}
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          spec:
            ingressClassName: nginx
            rules:
              - host: ${APP_NAME}.${K8S_EXTERNAL_IP}.nip.io
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: ${APP_NAME}
                          port:
                            number: 80
          EOF
          echo "Deleting..."
          kubectl delete -f deploy.yaml
      params:
        KUBECONFIG_CONTENT: ((kubeconfig_content))
        APP_NAME: ($ .organization_canonical $)-($ .project $)-($ .environment $)
        APP_PORT: 8080
        APP_REPLICAS: 3
        APP_IMAGE_REPO: ((registry_repository))
        APP_IMAGE_TAG: ($ .environment $)
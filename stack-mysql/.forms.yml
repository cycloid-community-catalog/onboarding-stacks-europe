---
version: "2"
use_cases:
- name: aws
  sections:
  - name: Amazon Relational Database Service (RDS)
    groups:
    - name: Access Configuration
      technologies: [pipeline]
      vars:
      - name: "AWS Account"
        description: "The AWS account where to deploy the infrastructure."
        key: aws_cred
        widget: cy_cred
        widget_config:
          display_keys: false
          cred_types:
            - aws
        type: string
        default: "((aws))"
        required: true
      - name: "AWS Region"
        description: "AWS region where to deploy the resources."
        key: aws_region
        widget: auto_complete
        type: string
        values_ref: https://cycloid-demo-stackforms-values.s3.eu-west-1.amazonaws.com/aws-regions.json
        default: eu-west-3
        validations: 
        - regexp: "^[a-z]{2}-[a-z]+-\\d+$" 
          error_message: "Please enter a valid AWS region such as us-east-1"
        required: true

    - name: RDS Configuration
      technologies: [terraform]
      vars:
      - name: "Snapshot Identifier"
        description: "(Optional) Specifies whether or not to create this database from a snapshot. This corresponds to the snapshot ID you'd find in the RDS console, e.g: rds:production-2015-06-26-06-05."
        key: rds_snapshot_identifier
        widget: simple_text
        type: string
        required: false
      - name: "Subnets"
        description: "Subnets where to deploy the resources."
        key: rds_subnet_id
        widget: simple_text
        type: string
        required: true
      - name: "Security Group"
        description: "The application security group to grant access to the database."
        key: app_security_group_id
        type: "string"
        widget: cy_inventory_resource
        widget_config:
          attribute: id
          filters:
            type: aws_security_group






    - name: VM Specs
      technologies: [terraform]
      vars:
      - name: "Instance type"
        description: "Instance type for the VM."
        key: vm_instance_type
        widget: slider_list
        type: string
        default: "t3a.small"
        values:
            - "t3a.small"
            - "t3a.medium"
            - "t3a.large"
        required: true
      - name: "Disk size"
        unit: Go
        description: "Disk size for the VM."
        key: vm_disk_size
        widget: slider_range
        type: integer
        default: 20
        values:
            - 20
            - 250
        required: true

    - name: NodeJS Application

    - name: Day-2 Operations with Ansible

    - name: Day 2 Operations with AWS CLI
      technologies: [pipeline]
      vars:
      - name: "Instance status"
        description: "Status for the deployed instances."
        key: vm_instance_status
        widget: radios
        type: string
        default: "Started"
        values:
            - "Started"
            - "Stopped"
        required: true

- name: azure
  sections:
  - name: NodeJS WebApp
    groups:
    - name: Access Configuration
      technologies: [pipeline]
      vars:
      - name: "Azure credentials"
        description: "The azure credential used to deploy the infrastructure. It contains subscription_id, tenant_id, client_id, and client_secret."
        key: azure_cred
        widget: cy_cred
        widget_config:
          display_keys: false
          cred_types:
            - azure
        type: string
        default: "((azure))"
        required: true
    - name: Azure Infrastructure
      technologies: [terraform]
      vars:
      - name: "Azure location"
        description: "Azure location for Terraform."
        key: azure_location
        widget: dropdown
        values_ref: https://cycloid-demo-stackforms-values.s3.eu-west-1.amazonaws.com/azure-locations.json
        default: "West Europe"
        type: string
        required: true
      # - name: "Resource Group"
      #   description: "The name of the existing resource group where the resources will be deployed."
      #   key: resource_group_name
      #   widget: dropdown
      #   values_ref: 'https://cycloid-demo-valuesref-azure.azurewebsites.net/api/resourcegroups?location=${azure_location}'
      #   type: map
      #   required: true

    # - name: Network Configuration
    #   technologies: [terraform]
    #   vars:
    #   - name: "Virtual Network"
    #     description: "Virtual Network where to deploy the resources. Presented options matches selected resource group."
    #     key: vnet_name
    #     widget: dropdown
    #     values_ref: 'https://cycloid-demo-valuesref-azure.azurewebsites.net/api/virtualnetworks?location=${azure_location}&resourceGroupName=${resource_group_name}'
    #     type: map
    #     required: true
    #   - name: "Subnet"
    #     description: "Subnet where to deploy the resources. Presented options matches selected resource group and selected virtual network."
    #     key: subnet_name
    #     widget: dropdown
    #     values_ref: 'https://cycloid-demo-valuesref-azure.azurewebsites.net/api/subnets?vnetName=${vnet_name}&resourceGroupName=${resource_group_name}'
    #     type: map
    #     required: true

    - name: VM Specs
      technologies: [terraform]
      vars:
      - name: "Instance type"
        description: "Instance type for the worker."
        key: vm_instance_type
        widget: slider_list
        type: string
        default: "Standard_DS1_v2"
        values:
            - "Standard_DS1_v2"
            - "Standard_DS2_v2"
            - "Standard_DS3_v2"
        required: true
      - name: "Disk size"
        unit: Go
        description: "Disk size for the instance."
        key: vm_disk_size
        widget: slider_range
        type: integer
        default: 30
        values:
            - 30
            - 250
        required: true
      - name: "Resource Group"
        description: "The name of the existing resource group where the resources will be deployed."
        key: resource_group_name
        widget: cy_inventory_resource
        widget_config:
          attribute: name
          filters:
            type: azurerm_resource_group
        type: string
        required: true

    - name: NodeJS Application

    - name: Day-2 Operations with Ansible

    - name: Day 2 Operations with Azure CLI
      technologies: [pipeline]
      vars:
      - name: "Instance status"
        description: "Status for the deployed instances."
        key: vm_instance_status
        widget: radios
        type: string
        default: "Started"
        values:
            - "Started"
            - "Stopped"
        required: true


- name: gcp
  sections:
  - name: NodeJS WebApp
    groups:
    - name: Access Configuration
      technologies: [pipeline]
      vars:
      - name: "GCP credentials"
        description: "Google Cloud Platform JSON credentials to use for Terraform."
        key: gcp_cred
        widget: cy_cred
        widget_config:
          display_keys: false
          cred_types:
            - gcp
        type: string
        default: "((gcp))"
        required: true
      - name: "GCP region"
        description: "Google Cloud Platform region to use for Terraform."
        key: gcp_region
        widget: auto_complete
        type: string
        default: "europe-west1"
        values_ref: https://cycloid-demo-stackforms-values.s3.eu-west-1.amazonaws.com/gcp-regions.json
        required: true
      - name: "GCP zone"
        description: "Google Cloud Platform zone to use for Terraform."
        key: gcp_zone
        widget: auto_complete
        type: string
        default: "europe-west1-b"
        values:
          options:
            - condition: "$gcp_region == 'asia-east1'"
              values: ['asia-east1-a', 'asia-east1-b', 'asia-east1-c']
            - condition: "$gcp_region == 'asia-east2'"
              values: ['asia-east2-a', 'asia-east2-b', 'asia-east2-c']
            - condition: "$gcp_region == 'asia-northeast1'"
              values: ['asia-northeast1-a', 'asia-northeast1-b', 'asia-northeast1-c']
            - condition: "$gcp_region == 'asia-northeast2'"
              values: ['asia-northeast2-a', 'asia-northeast2-b', 'asia-northeast2-c']
            - condition: "$gcp_region == 'asia-northeast3'"
              values: ['asia-northeast3-a', 'asia-northeast3-b', 'asia-northeast3-c']
            - condition: "$gcp_region == 'asia-south1'"
              values: ['asia-south1-a', 'asia-south1-b', 'asia-south1-c']
            - condition: "$gcp_region == 'asia-south2'"
              values: ['asia-south2-a', 'asia-south2-b', 'asia-south2-c']
            - condition: "$gcp_region == 'asia-southeast1'"
              values: ['asia-southeast1-a', 'asia-southeast1-b', 'asia-southeast1-c']
            - condition: "$gcp_region == 'asia-southeast2'"
              values: ['asia-southeast2-a', 'asia-southeast2-b', 'asia-southeast2-c']
            - condition: "$gcp_region == 'australia-southeast1'"
              values: ['australia-southeast1-a', 'australia-southeast1-b', 'australia-southeast1-c']
            - condition: "$gcp_region == 'australia-southeast2'"
              values: ['australia-southeast2-a', 'australia-southeast2-b', 'australia-southeast2-c']
            - condition: "$gcp_region == 'europe-central2'"
              values: ['europe-central2-a', 'europe-central2-b', 'europe-central2-c']
            - condition: "$gcp_region == 'europe-north1'"
              values: ['europe-north1-a', 'europe-north1-b', 'europe-north1-c']
            - condition: "$gcp_region == 'europe-west1'"
              values: ['europe-west1-b', 'europe-west1-c', 'europe-west1-d']
            - condition: "$gcp_region == 'europe-west2'"
              values: ['europe-west2-a', 'europe-west2-b', 'europe-west2-c']
            - condition: "$gcp_region == 'europe-west3'"
              values: ['europe-west3-a', 'europe-west3-b', 'europe-west3-c']
            - condition: "$gcp_region == 'europe-west4'"
              values: ['europe-west4-a', 'europe-west4-b', 'europe-west4-c']
            - condition: "$gcp_region == 'europe-west6'"
              values: ['europe-west6-a', 'europe-west6-b', 'europe-west6-c']
            - condition: "$gcp_region == 'northamerica-northeast1'"
              values: ['northamerica-northeast1-a', 'northamerica-northeast1-b', 'northamerica-northeast1-c']
            - condition: "$gcp_region == 'northamerica-east1'"
              values: ['northamerica-east1-a', 'northamerica-east1-b', 'northamerica-east1-c']
            - condition: "$gcp_region == 'southamerica-east1'"
              values: ['southamerica-east1-a', 'southamerica-east1-b', 'southamerica-east1-c']
            - condition: "$gcp_region == 'us-central1'"
              values: ['us-central1-a', 'us-central1-b', 'us-central1-c', 'us-central1-f']
            - condition: "$gcp_region == 'us-east1'"
              values: ['us-east1-b', 'us-east1-c', 'us-east1-d']
            - condition: "$gcp_region == 'us-east4'"
              values: ['us-east4-a', 'us-east4-b', 'us-east4-c']
            - condition: "$gcp_region == 'us-west1'"
              values: ['us-west1-a', 'us-west1-b', 'us-west1-c']
            - condition: "$gcp_region == 'us-west2'"
              values: ['us-west2-a', 'us-west2-b', 'us-west2-c']
            - condition: "$gcp_region == 'us-west3'"
              values: ['us-west3-a', 'us-west3-b', 'us-west3-c']
            - condition: "$gcp_region == 'us-west4'"
              values: ['us-west4-a', 'us-west4-b', 'us-west4-c']
        required: true

    - name: VM Specs
      technologies: [terraform]
      vars:
      - name: "Machine type"
        description: "Machine type for the VM."
        key: vm_machine_type
        widget: slider_list
        type: string
        default: "n2-standard-2"
        values:
            - n1-standard-2
            - n2-standard-2
            - n2d-standard-2
        required: true
      - name: "Disk size"
        unit: Go
        description: "Disk size for the VM."
        key: vm_disk_size
        widget: slider_range
        type: integer
        default: 20
        values:
            - 10
            - 250
        required: true
      - name: "VPC"
        description: "VPC where to deploy the virtual machine."
        key: vpc_name
        widget: cy_inventory_resource
        widget_config:
          attribute: name
          filters:
            type: google_compute_network
        type: string
        required: true

    - name: NodeJS Application

    - name: Day-2 Operations with Ansible

    - name: Day 2 Operations with Google Cloud CLI
      technologies: [pipeline]
      vars:
      - name: "Instance status"
        description: "Status for the deployed instances."
        key: vm_instance_status
        widget: radios
        type: string
        default: "Started"
        values:
            - "Started"
            - "Stopped"
        required: true

- name: vmware
  sections:
  - name: NodeJS WebApp
    groups:
    - name: Access Configuration
      technologies: [pipeline]
      vars:
      - name: "vSphere Environment"
        description: "The vSphere environment where to deploy the infrastructure. It contains server, user, password, datacenter, datastore and cluster."
        key: vsphere_env
        widget: cy_cred
        widget_config:
          display_keys: false
          cred_types:
            - vmware
        type: string
        default: "((vsphere))"

    - name: Virtual machine specifications
      technologies: [terraform]
      vars:
      - name: "vCPU"
        unit: vCPU
        description: "Number of vCPU allocated to the virtual machine."
        key: vm_cpu
        widget: slider_range
        type: integer
        default: 2
        values:
            - 1
            - 4
        required: true
        # CPU amount will be deducted from the team quota
        quota_config:
          type: "cpu"
      - name: "Memory"
        unit: Mo
        description: "Memory allocated to the virtual machine."
        key: vm_memory
        widget: slider_list
        type: integer
        default: 2048
        values:
            - 1024
            - 2048
            - 4096
        required: true
        # Memory amount will be deducted from the team quota
        quota_config:
          type: "memory"
      - name: "Disk"
        unit: Go
        description: "Disk size allocated to the virtual machine."
        key: vm_disk_size
        widget: slider_range
        type: integer
        default: 20
        values:
            - 10
            - 200
        required: true
        # Storage amount will be deducted from the team quota
        quota_config:
          type: "storage"
      - name: "Clone from VM or Template Name"
        description: "Virtual Machine or Template name to clone from. The VM or template must already exist in your VMware datacenter."
        key: vsphere_template
        widget: auto_complete
        type: string
        values: ["debian","ubuntu","hardened debian"]
        default: "debian"
        required: true

resource_types:
- name: terraform
  type: registry-image
  source:
    repository: cycloid/terraform-resource
    tag: ((terraform_version))


resources:
- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ($ .env $)
    backend_type: http
    backend_config:
      address: '($ .api_url $)/inventory?jwt=($ .inventory_jwt $)'
    vars:
      cy_api_key: ((cy_api_key))
      cy_api_url: ($ .api_url $)
      cy_org: ($ .org $)
      cy_project: ($ .project $)
      cy_env: ($ .env $)
      cy_component: ($ .component $)
($ if eq .use_case "aws" $)
      aws_cred: ((aws_cred))
      aws_region: ((aws_region))
($ else if eq .use_case "azure" $)
      azure_cred: ((azure_cred))
($ else if eq .use_case "gcp" $)
      gcp_project: ((gcp_project))
      gcp_region: ((gcp_region))
      gcp_zone: ((gcp_zone))
    env:
      GOOGLE_PROJECT: ((gcp_project))
      GOOGLE_REGION: ((gcp_region))
      GOOGLE_ZONE: ((gcp_zone))
      GOOGLE_CREDENTIALS: ((gcp.json_key))
($ else if eq .use_case "vmware" $)
      vsphere_server: ((vsphere_server))
      vsphere_cred: ((vsphere_cred))
($ else if eq .use_case "outscale" $)
      outscale_cred: ((outscale_cred))
      outscale_region: ((outscale_region))
($ else if eq .use_case "ionos" $)
      ionos_cred: ((ionos_cred))
      ionos_region: ((ionos_region))
($ end $)

# The repo with our Dockerfile
- name: git_app_code
  type: git
  icon: github-circle
  source:
    uri: ((git_url))
    branch: ((git_branch))
    private_key: ((git_ssh_key))
    paths:
      - ((git_path))/*

# Where we will push the image
- name: app_image
  type: registry-image
  icon: docker
  source:
    repository: ((registry_repository))
    username: ((registry_username))
    password: ((registry_password))
    tag: ((git_branch))

# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  icon: github-circle
  source:
    uri: ($ .scs_url $)
    branch: ($ .scs_branch $)
    ($- if eq .scs_cred_type "basic_auth" $)
    username: ((($ .scs_cred_path $).username))
    password: ((($ .scs_cred_path $).password))
    ($- end $)
    ($- if eq .scs_cred_type "ssh" $)
    private_key: ((($ .scs_cred_path $).ssh_key))
    ($- end $)
    paths:
      - ($ .stack_path $)/terraform/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  icon: github-circle
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
    ($- if eq .cr_cred_type "basic_auth" $)
    username: ((($ .cr_cred_path $).username))
    password: ((($ .cr_cred_path $).password))
    ($- end $)
    ($- if eq .cr_cred_type "ssh" $)
    private_key: ((($ .cr_cred_path $).ssh_key))
    ($- end $)
    paths:
      - ($ .org $)/($ .project $)/($ .env $)/($ .component $)/terraform/*

# The Ansible stack (will be merged with the config)
- name: git_stack-ansible
  type: git
  icon: github-circle
  source:
    uri: ($ .scs_url $)
    branch: ($ .scs_branch $)
    ($- if eq .scs_cred_type "basic_auth" $)
    username: ((($ .scs_cred_path $).username))
    password: ((($ .scs_cred_path $).password))
    ($- end $)
    ($- if eq .scs_cred_type "ssh" $)
    private_key: ((($ .scs_cred_path $).ssh_key))
    ($- end $)
    paths:
      - ($ .stack_path $)/ansible/*

# The Ansible config (will be merged with the stack)
- name: git_config-ansible
  type: git
  icon: github-circle
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
    ($- if eq .cr_cred_type "basic_auth" $)
    username: ((($ .cr_cred_path $).username))
    password: ((($ .cr_cred_path $).password))
    ($- end $)
    ($- if eq .cr_cred_type "ssh" $)
    private_key: ((($ .cr_cred_path $).ssh_key))
    ($- end $)
    paths:
      - ($ .org $)/($ .project $)/($ .env $)/($ .component $)/ansible/environments/*

# 60 minutes timer to trigger destroy periodically
- name: every-1h
  type: time
  icon: timer
  source:
    interval: 60m


groups:
- name: overview
  jobs:
    - deploy-infra
    - build-and-push
    - deploy-app

- name: destroy
  jobs:
    - destroy-infra


jobs:
  - name: deploy-infra
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: true
        - get: git_config-terraform
          trigger: true

      - task: merge-stack-and-config
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /usr/bin/merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ($ .org $)/($ .project $)/($ .env $)/($ .component $)/terraform/($ .use_case $)
          STACK_PATH: ($ .stack_path $)/terraform

      - put: tfstate
        params:
          terraform_source: merged-stack/

  - name: build-and-push
    plan:
    - get: git_app_code
      trigger: true
    - task: build-task-image
      privileged: true
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: concourse/oci-build-task
        inputs:
        - name: git_app_code
        outputs:
        - name: image
        params:
          CONTEXT: git_app_code/((git_path))
        caches:
        - path: cache
        run:
          path: build
    - put: app_image
      params:
        image: image/image.tar

  - name: deploy-app
    serial: true
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-ansible
          trigger: true
        - get: git_config-ansible
          trigger: true
        - get: tfstate
          trigger: true
          passed:
            - deploy-infra
        - get: app_image
          trigger: true
          passed:
            - build-and-push

      - task: merge-stack-and-config
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /usr/bin/merge-stack-and-config
          inputs:
          - name: git_config-ansible
            path: "config"
          - name: git_stack-ansible
            path: "stack"
          - name: tfstate
            path: "terraform"
          outputs:
          - name: merged-stack
            path: "merged-stack"
          - name: output-var
            path: "output-var"
        params:
          CONFIG_PATH: ($ .org $)/($ .project $)/($ .env $)/($ .component $)/ansible/environments
          STACK_PATH: ($ .stack_path $)/ansible

      - task: run-ansible
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: ((ansible_version))
          run:
            path: /bin/bash
            args:
              - '-ec'
              - |
                # Get vm_os_user and vm_public_ip env vars from Terraform outputs
                source ansible-playbook/env
                export ANSIBLE_REMOTE_USER=${vm_os_user:-admin}
                export ANSIBLE_EXTRA_ARGS="-i ${vm_public_ip},"
                echo "Targeting VM with IP ${vm_public_ip}"
                /usr/bin/ansible-runner
          caches:
            - path: ansible-playbook/roles
          inputs:
          - name: merged-stack
            path: ansible-playbook
        params:
          #+ Parameters of ansible-runner script. Can be found here: https://github.com/cycloidio/docker-cycloid-toolkit#ansible-runner
          SSH_PRIVATE_KEY: ((($ .org $)-($ .project $)-($ .env $)-compute-ssh.ssh_key))
          ANSIBLE_PLAYBOOK_PATH: ansible-playbook
          ANSIBLE_PLAYBOOK_NAME: site.yml
          ANSIBLE_EXTRA_VARS:
            cy_org: ($ .org $)
            cy_project: ($ .project $)
            cy_env: ($ .env $)
            cy_component: ($ .component $)
            app_image: ((registry_repository))
            app_tag: ((git_branch))
            app_port: 8080
            hosts_service: ((hosts_service))
            hosts_package: ((hosts_package))
            hosts_user: ((hosts_user))


  # Destroy the demo infrastructure after its creation (after a timer and every hour)
  - name: destroy-infra
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
        - get: git_config-terraform
          trigger: false
        - get: tfstate
          trigger: true

        # In case of fail, it will help to retry every 1h to make sure the terraform is destroyed
        - get: every-1h
          trigger: true

      # Timer to make sure the infra is destroyed at least 30 minutes after creation
      - task: wait-a-bit
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
          run:
            path: /bin/bash
            args:
              - '-ec'
              - |
                sleep 3600

      - task: merge-stack-and-config
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /usr/bin/merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ($ .org $)/($ .project $)/($ .env $)/($ .component $)/terraform/($ .use_case $)
          STACK_PATH: ($ .stack_path $)/terraform

      - put: tfstate
        params:
          action: destroy
          terraform_source: merged-stack/
        get_params:
          action: destroy

      - task: pipeline-cleanup
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
          run:
            path: /bin/bash
            args:
              - '-ec'
              - |
                echo "Pause pipeline ${PROJECT}/${ENV} in org ${CY_ORG}:"
                cy pipeline pause \
                --org ${CY_ORG} \
                --project ${PROJECT} \
                --env ${ENV} >output
                if [[ "$?" != "0" ]]; then
                    echo "Pause Pipeline Error: cy returned code $?"
                    cat output
                    exit 1
                fi

          params:
            CY_API_KEY: ((cy_api_key))
            CY_API_URL: ($ .api_url $)
            CY_ORG: ($ .org $)
            PROJECT: ($ .project $)
            ENV: ($ .env $)